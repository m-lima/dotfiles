#!/bin/bash

function generateTree {
  mkdir -p "${BASE_DIR}/build/cmake"
  mkdir -p "${BASE_DIR}/ext"
  mkdir -p "${BASE_DIR}/src"
  mkdir -p "${BASE_DIR}/test"
}

function generateGitIgnore {
  echo \
'# Vim
**/.*.swp

# Idea
**/.idea

# Netbeans
nbproject

# QT Creator
CMakeLists.txt.user

# Visual Studio
.vs

# Build
build

# Output
lib
bin
include

# Secrets
**/*.hide

# External projects
ext/*/pack
' > "${BASE_DIR}/.gitignore"
}

function generateHelloSource {
  echo '#include "hello.hpp"'
  echo ''

  [ ! ${MAKE_MFL} ] && echo '#include <iostream>' && echo ''

  [ ${MAKE_MFL} ] && echo '#include <mfl/out.hpp>'
  [ ${MAKE_QT} ] && echo '#include <QString>'

  [ ${MAKE_MFL} ] || [ ${MAKE_QT} ] && echo ''

  if [ ${MAKE_MFL} ]
  then
    echo \
'void hello(std::string && name) {
  mfl::out::println("Hello {:s}", name);
}'
  else
    echo \
'void hello(std::string && name) {
  std::cout << "Hello " << name << std::endl;
}'
  fi

  echo ''

  if [ ${MAKE_QT} ]
  then
    echo \
'std::string extractName(int argc, char * argv[]) {
  QString name{argc > 1 ? argv[1] : "World"};

  return name.toStdString();
}'
  else
    echo \
'std::string extractName(int argc, char * argv[]) {
  auto name = argc > 1 ? argv[1] : "World";

  return name;
}'
  fi
}

function generateSource {
  # hello.hpp
  echo \
'#pragma once

#include <string>

void hello(std::string && name);
std::string extractName(int argc, char * argv[]);
' > "${BASE_DIR}/src/hello.hpp"

  # hello.cpp
  generateHelloSource > "${BASE_DIR}/src/hello.cpp"

  # main.cpp
  echo \
'#include "hello.hpp"

int main(int argc, char * argv[]) {
  hello(extractName(argc, argv));

  return 0;
}
' > "${BASE_DIR}/src/main.cpp"
}

function generateTestSource {
  # test_main.cpp
  echo \
'#include <gtest/gtest.h>

int main(int argc, char * argv[]) {
  try {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
  } catch (...) {}

  return -1;
}
' > "${BASE_DIR}/test/test_main.cpp"

  # test_hello.cpp
  echo \
'#include <gtest/gtest.h>

#include "hello.hpp"

TEST(Hello, should_return_world_on_empty) {
  ASSERT_EQ("World", extractName(0, nullptr));
}
' > "${BASE_DIR}/test/test_hello.cpp"
}

function generateCmakeTestBase {
  local project_subst='s~##PROJECT_NAME##~'"${PROJECT_NAME}"'~g'
  local executable_subst='s~##EXE_NAME##~'`echo "${PROJECT_NAME}" | tr '[:upper:]' '[:lower:]'`'~g'

  sed -e "${project_subst}" -e "${executable_subst}" <<< \
'if (MAKE_TESTS)
  message(STATUS "Making tests")

  enable_testing()
  include(GoogleTest)

  # GTest
  include("${EXT_DIR}/gtest/gtest.cmake")
  list(APPEND TEST_LIBRARIES
      ##EXE_NAME##-lib
      gtest_main
  )

  list(APPEND TEST_INCLUDE_DIRS "${SRC_DIR}")

  # Test sources
  list(APPEND TESTS
    ${TEST_DIR}/test_hello.cpp
  )

  # Test executable
  add_executable(##EXE_NAME##-test ${TEST_DIR}/test_main.cpp ${TESTS})
  target_link_libraries(##EXE_NAME##-test PRIVATE ${TEST_LIBRARIES})
  target_include_directories(##EXE_NAME##-test PRIVATE ${TEST_INCLUDE_DIRS})

  # CTest integration
  gtest_discover_tests(##EXE_NAME##-test)

  # Copy the resources
  file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/test/res)
  file(GLOB RESOURCES ${TEST_DIR}/res/*)
  file(COPY ${RESOURCES} DESTINATION ${CMAKE_BINARY_DIR}/test/res)

  # Run tests before main build
  add_custom_target(test-all COMMAND ./##EXE_NAME##-test --gtest_shuffle)
  add_dependencies(test-all ##EXE_NAME##-test)
  add_dependencies(##EXE_NAME## test-all)
endif()
'
}

function generateCmakeBase {
  echo \
'##------------------------------------------------------------------------------
## Initialization
##

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)

# Test enabler
option(MAKE_TESTS "make tests" ON)

# Set release by default
if (NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

# Enable folders
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Current state
if (WIN32)
  message(STATUS "WIN32")
endif ()
if (MSVC)
  message(STATUS "MSVC")
endif ()
if (APPLE)
  message(STATUS "APPLE")
endif ()

message(STATUS "Using C: " ${CMAKE_C_COMPILER_ID})
message(STATUS "Using CXX: " ${CMAKE_CXX_COMPILER_ID})

# Set high warning levels
if (MSVC)
  if (CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else ()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  endif ()
else ()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-long-long -pedantic")
endif ()

# Make $HOME compatible with windows
STRING(REGEX REPLACE "\\\\" "/" ENV_HOME_DIR "$ENV{HOME}")

# Add custom modules
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/findcmake")

# Set base directories
set(SRC_DIR "${CMAKE_SOURCE_DIR}/src")
set(EXT_DIR "${CMAKE_SOURCE_DIR}/ext")
set(LIB_DIR "${CMAKE_SOURCE_DIR}/lib")
set(INC_DIR "${CMAKE_SOURCE_DIR}/inc")
set(TEST_DIR "${CMAKE_SOURCE_DIR}/test")
set(LIB_INSTALL_DIR "${CMAKE_BINARY_DIR}/lib")

# User aditional findpackage prefixes
list(APPEND USER_LIBS_PATH "${ENV_HOME_DIR}/lib" CACHE LIST "additional findpackage prefixes (~/lib)")
message(STATUS "Additional findpackage prefixes: " "${USER_LIBS_PATH}")
' > "${BASE_DIR}/Init.cmake"

  local project_subst='s~##PROJECT_NAME##~'"${PROJECT_NAME}"'~g'
  local executable_subst='s~##EXE_NAME##~'`echo "${PROJECT_NAME}" | tr '[:upper:]' '[:lower:]'`'~g'

  sed -e "${project_subst}" -e "${executable_subst}" <<< \
'cmake_minimum_required(VERSION 3.12)
project(##PROJECT_NAME## CXX)

##------------------------------------------------------------------------------
## Initialization
##

include("${CMAKE_SOURCE_DIR}/Init.cmake")

##------------------------------------------------------------------------------
## Dependencies
##
' > "${BASE_DIR}/CMakeLists.txt"

[ ${MAKE_MFL} ] && echo \
'# MFL
include("${EXT_DIR}/mfl/mfl.cmake")
list(APPEND LIBRARIES mfl)
' >> "${BASE_DIR}/CMakeLists.txt"

[ ${MAKE_QT} ] && echo \
'# QT
set(QT_USER_LIB_NAME qt)
list(APPEND QT_COMPONENTS Widgets)
include("${EXT_DIR}/qt/qt.cmake")
list(APPEND LIBRARIES qt)
' >> "${BASE_DIR}/CMakeLists.txt"

  sed -e "${project_subst}" -e "${executable_subst}" <<< \
'##------------------------------------------------------------------------------
## Sources
##

list(APPEND SOURCES
  ${SRC_DIR}/hello.cpp
)

list(APPEND HEADERS
  ${SRC_DIR}/hello.hpp
)

##------------------------------------------------------------------------------
## Targets
##

add_definitions(${DEFINITIONS})

add_library(##EXE_NAME##-lib STATIC ${SOURCES})
target_link_libraries(##EXE_NAME##-lib PUBLIC ${LIBRARIES})
target_include_directories(##EXE_NAME##-lib PUBLIC ${INCLUDE_DIRS})

##------------------------------------------------------------------------------
## Main
##

add_executable(##EXE_NAME## ${SRC_DIR}/main.cpp)
target_link_libraries(##EXE_NAME## PRIVATE ##EXE_NAME##-lib)

##------------------------------------------------------------------------------
## Tests
##
' >> "${BASE_DIR}/CMakeLists.txt"

[ ${MAKE_GTEST} ] && echo 'include("${CMAKE_SOURCE_DIR}/Tests.cmake")' >> "${BASE_DIR}/CMakeLists.txt"

}

function generateMFL {
  mkdir -p "${BASE_DIR}/ext/mfl"

  echo \
'include(ExternalProject)
include(GNUInstallDirs)

ExternalProject_Add(mfl-project
  PREFIX deps/mfl
  GIT_REPOSITORY "https://github.com/m-lima/mfl.git"
  GIT_TAG "master"
  SOURCE_DIR ${CMAKE_CURRENT_LIST_DIR}/pack/mfl
  STAMP_DIR ${CMAKE_CURRENT_LIST_DIR}/pack/stamp
  TMP_DIR ${CMAKE_CURRENT_LIST_DIR}/pack/tmp
  INSTALL_COMMAND ""
  )

add_library(mfl INTERFACE)

target_compile_definitions(mfl INTERFACE FMT_HEADER_ONLY=1)

target_include_directories(mfl INTERFACE
  ${CMAKE_CURRENT_LIST_DIR}/pack/mfl/include
  $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/pack/mfl/ext/fmt/pack/fmt/include>
  $<INSTALL_INTERFACE:include>)

add_dependencies(mfl mfl-project)
' > "${BASE_DIR}/ext/mfl/mfl.cmake"
}

function generateGtest {
  mkdir -p "${BASE_DIR}/ext/gtest"

  echo \
'configure_file("${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt.in" "${CMAKE_CURRENT_LIST_DIR}/pack/pre/CMakeLists.txt")

execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
    RESULT_VARIABLE failure
    WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/pack/pre")

if (failure)
  message(FATAL_ERROR "Failed to configure GTest")
endif()

execute_process(COMMAND ${CMAKE_COMMAND} --build .
    RESULT_VARIABLE failure
    WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/pack/pre")

if (failure)
  message(FATAL_ERROR "Failed to make GTest")
endif()

# Prevent overriding the parent project compiler/linker settings on Windows
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

# Add googletest directly to our build. This defines the gtest and gtest_main targets.
add_subdirectory(
    ${CMAKE_CURRENT_LIST_DIR}/pack/gtest
    ${CMAKE_BINARY_DIR}/deps/gtest
    EXCLUDE_FROM_ALL
)

set(INSTALL_GTEST OFF)
' > "${BASE_DIR}/ext/gtest/gtest.cmake"

echo 'cmake_minimum_required(VERSION 3.12)
project(gtest-download NONE)

include(ExternalProject)
include(GNUInstallDirs)

ExternalProject_Add(gtest-project
    GIT_REPOSITORY https://github.com/google/googletest.git
    SOURCE_DIR ${CMAKE_CURRENT_LIST_DIR}/pack/gtest
    BINARY_DIR ${CMAKE_BINARY_DIR}/deps/gtest
    CONFIGURE_COMMAND ""
    BUILD_COMMAND     ""
    INSTALL_COMMAND   ""
    TEST_COMMAND      ""
    )
' > "${BASE_DIR}/ext/gtest/CMakeLists.txt.in"

generateCmakeTestBase > "${BASE_DIR}/Tests.cmake"
}

function generateQT {
  mkdir -p "${BASE_DIR}/ext/qt"

  echo \
'if(NOT DEFINED QT_COMPONENTS)
  message("")
  message("No modules specified for QT")
  message("Set QT_COMPONENTS variable before including QT")
  message("e.g. list(APPEND QT_COMPONENTS Widgets)")
  message("")
  message(FATAL_ERROR "No modules specified for QT")
endif()


if(DEFINED QT_USER_LIB_NAME)
  list(APPEND CMAKE_PREFIX_PATH "${USER_LIBS_PATH}/${QT_USER_LIB_NAME}")
endif()

message(STATUS "Using QT modules: " ${QT_COMPONENTS})
find_package(Qt5 QUIET COMPONENTS ${QT_COMPONENTS})

# QT not installed and should use ExternalProject_Add
if (NOT Qt5_FOUND)
  message("Could not find Qt. Adding external project")
  message("If you have it, set QT_USER_LIB_NAME")

  configure_file("${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt.in" "${CMAKE_CURRENT_LIST_DIR}/pack/pre/CMakeLists.txt")

  execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
      RESULT_VARIABLE failure
      WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/pack/pre")

  if (failure)
    message(FATAL_ERROR "Failed to configure QT")
  endif()

  execute_process(COMMAND ${CMAKE_COMMAND} --build .
      RESULT_VARIABLE failure
      WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/pack/pre")

  if (failure)
    message(FATAL_ERROR "Failed to make QT")
  endif()

  list(APPEND CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/pack/qt")

  find_package(Qt5 COMPONENTS ${QT_COMPONENTS} REQUIRED)
else()
  message(STATUS "Found QT. Not adding external project")
endif()

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

add_library(qt INTERFACE)

list(TRANSFORM QT_COMPONENTS PREPEND "Qt5::" OUTPUT_VARIABLE QT_PREPENDED_COMPONENTS)
target_link_libraries(qt INTERFACE ${QT_PREPENDED_COMPONENTS})
' > "${BASE_DIR}/ext/qt/qt.cmake"

  echo \
'cmake_minimum_required(VERSION 3.12)
project(qt-download NONE)

include(ExternalProject)
include(GNUInstallDirs)
  #URL_HASH "SHA256=a0d047b2da5782c8332c59ae203984b64e4d5dc5f4ba9c0884fdbe753d0afb46"

ExternalProject_Add(qt-project
  PREFIX deps/qt
  URL "https://download.qt.io/official_releases/qt/5.11/5.11.1/submodules/qtbase-everywhere-src-5.11.1.tar.xz"
  DOWNLOAD_DIR "${CMAKE_CURRENT_LIST_DIR}/pack/down"
  SOURCE_DIR "${CMAKE_CURRENT_LIST_DIR}/pack/src"
  STAMP_DIR "${CMAKE_CURRENT_LIST_DIR}/pack/stamp"
  TMP_DIR "${CMAKE_CURRENT_LIST_DIR}/pack/tmp"
  BUILD_IN_SOURCE 1
  CONFIGURE_COMMAND "./configure"
    -prefix "qt"
    -extprefix "${CMAKE_CURRENT_LIST_DIR}/pack/qt"
    -opensource
    -confirm-license
    -static
    -release
    -nomake examples
    -nomake tests
    -nomake tools
    -no-feature-concurrent
    -no-feature-dbus
    -no-feature-network
    -no-feature-sql
    -no-feature-testlib
    -no-feature-xml
  BUILD_COMMAND make
  INSTALL_COMMAND make install
  )
' > "${BASE_DIR}/ext/qt/CMakeLists.txt.in"
}

function initGit {
  pushd "${BASE_DIR}" > /dev/null
  git init > /dev/null
  git add .
  git commit -m 'Initial scaffolding'
  popd > /dev/null
}

if [[ "$1" == "-a" ]]
then
  shift

  if (( $# < 1 ))
  then
    echo "[31mIllegal number of parameters[m"
    echo "[31mExpected: $0 -a addon [addons...][m"
    echo "[31mAddons available: mfl gtest qt[m"

    exit -1
  fi

  BASE_DIR="."
  echo "Appending:" ${@}

  while [ $1 ]
  do
    option=$1
    shift

    case ${option} in
      mfl) generateMFL ;;
      gtest) generateGtest ;;
      qt) generateQT ;;
    esac
  done

  exit 0
fi

if (( $# < 2 ))
then
  echo "[31mIllegal number of parameters[m"
  echo "[31mExpected: $0 scaffolding_dir project_name [addons...][m"
  echo "Addons available: mfl gtest qt"

  exit -1
fi

BASE_DIR=$1
shift
PROJECT_NAME=$1
shift

if (( $# > 0 ))
then
  echo "Including:" ${@}
fi

while [ $1 ]
do
  option=$1
  shift

  case ${option} in
    mfl) MAKE_MFL=1 ;;
    gtest) MAKE_GTEST=1 ;;
    qt) MAKE_QT=1 ;;
    boost) MAKE_BOOST=1 ;;
  esac
done

generateTree
generateGitIgnore
generateSource
[ ${MAKE_GTEST} ] && generateTestSource
generateCmakeBase
[ ${MAKE_MFL} ] && generateMFL
[ ${MAKE_GTEST} ] && generateGtest
[ ${MAKE_QT} ] && generateQT
initGit

